什么是事务？
     事务指的是逻辑上的一组操作，这组操作要么全部成功，要么全部失败。

事务的特性：
      原子性· 指事务是一个不可分割的工作单位，事物中的操作要么都发生，要么都不发生。
      
      一致性· 事务前后数据的完整性必须保持一致。
      
      隔离性· 指多个用户并发访问数据库时，一个用户的事物不能被其他用户的事物所干扰，
              多个并发事物之间数据要相互隔离。
               不考虑隔离性，会引发安全问题： 
                  脏读：一个事务读取了另一个事务改写但还未提交的数据，如果这些数据被回滚，则读到的数据是无效的。
                  不可重复读：在同一事务中，多次读取同一数据返回
                  幻读：一个事务读取了几行记录后，另一个事务插入一些记录，幻读就发生了。
                        再后来的查询中，第一个事物就会发现有些原来没有的记录。
                
                 事务的四种隔离级别：
                  Read uncommitted(未授权读取、读未提交)：
					如果一个事务已经开始写数据，则另外一个事务则不允许同时进行写操作，但允许其他事务读此行数据。该隔离级别可以通过“排他写锁”实现。
					避免了更新丢失，却可能出现脏读。也就是说事务B读取到了事务A未提交的数据。
			      Read committed（授权读取、读提交）：
					读取数据的事务允许其他事务继续访问该行数据，但是未提交的写事务将会禁止其他事务访问该行。
					该隔离级别避免了脏读，但是却可能出现不可重复读。事务A事先读取了数据，事务B紧接了更新了数据，并提交了事务，而事务A再次读取该数据时，数据已经发生了改变。
				  Repeatable read（可重复读取）：
					读取数据的事务将会禁止写事务（但允许读事务），写事务则禁止任何其他事务。
					避免了不可重复读取和脏读，但是有时可能出现幻读。这可以通过“共享读锁”和“排他写锁”实现。
				 Serializable（序列化）：
					提供严格的事务隔离。它要求事务序列化执行，事务只能一个接着一个地执行，但不能并发执行。如果仅仅通过“行级锁”是无法实现事务序列化的，必须通过其他机制保证新插入的数据不会被刚执行查询操作的事务访问到。
					序列化是最高的事务隔离级别，同时代价也花费最高，性能很低，一般很少使用，在该级别下，事务顺序执行，不仅可以避免脏读、不可重复读，还避免了幻像读。
					
					隔离级别越高，越能保证数据的完整性和一致性，但是对并发性能的影响也越大。对于多数应用程序，可以优先考虑把数据库系统的隔离级别设为Read Committed。它能够避免脏读取，而且具有较好的并发性能。尽管它会导致不可重复读、幻读和第二类丢失更新这些并发问题，在可能出现这类问题的个别场合，可以由应用程序采用悲观锁或乐观锁来控制。
					大多数数据库的默认级别就是Read committed，比如Sql Server , Oracle。
					MySQL的默认隔离级别就是Repeatable read。
					
                 事务的七种传播行为：
					事务传播行为类型                             说明
					PROPAGATION_REQUIRED       如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。这是最常见的选择。
					PROPAGATION_SUPPORTS       支持当前事务，如果当前没有事务，就以非事务方式执行。
					PROPAGATION_MANDATORY      使用当前的事务，如果当前没有事务，就抛出异常。
					PROPAGATION_REQUIRES_NEW  新建事务，如果当前存在事务，把当前事务挂起。
					PROPAGATION_NOT_SUPPORTED 以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。
					PROPAGATION_NEVER         以非事务方式执行，如果当前存在事务，则抛出异常。
					PROPAGATION_NESTED        如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类 似的操作。
      持久性· 一个事物一旦被提交，它对数据库中的数据的改变就是永久性的，
              即使数据库发生故障也不应该对其有任何影响。
              

spring 事物管理
        高层抽象主要包括3个接口
       PlatformTransactionManager 事物管理器
       TransactionDefinition 事物定义信息（隔离，传播，超时，只读）
       TransactionStatus 事物具体运行状态。
       
spring 支持两种方式事物管理

       1. 编程式的事物管理
            在实际应用中很少使用。
            通过TransacTemplate手动管理事物
            
       2. 使用xml配置声明式事务。
            开发中推荐使用（代码入侵性最小）
           Spring的声明式事务是通过AOP实现的。
       
